#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.

# Xiaohan Qin 521021910604

# Describe how and why you modified the baseline code.
# 1. Use iaddl and modify the order of some instructions: CPE →12.96
#    By using iaddl, we didn’t need to use an extra register to save the temp variable
#    and can use less instructions to have the same performance.
# 2. 8-way loop unrolling: CPE→10.62
#    In this program, most of the time overhead comes from judgment and jump instructions. Taking
#    this into consideration, we decided to do multiple loops and update the relevant data at once,
#    which reduced jump and assignment instructions. After some experiment, we chose to unroll 8 ways.
# 3. Solve load/use hazard: CPE→9.83
#    In the original file ncopy.ys, "load and use" or mrmovl then rmmovl will cause penalty, which must
#    be avoided to improve the performance. We rearranged the order of instructions to avoid stalling
#    as much as possible.
# 4. Use binary search tree: CPE→8.96
#    Use binary search tree to quickly find what the input is and
#    just execute once instead of using loop. In this way, we get 8.96.
# 5. Modify the HCL to get a better prediction: CPE→7.62
#    We modified pipe-full.hcl and the order of some
#    instructions, then we use forwarding to help JXX know in advance if a jump is required, which
#    avoid the pipeline to stall.
# 6. (Experiment) delete unnecessary instructions: CPE→7.18
#    By deleting some pushl and popl, we can still get a correct result while CPE is
#    only 7.18. But due to regulations, this is just our experiment and our final CPE is still 7.62.

##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	iaddl -8, %edx      # len = len - 8
	irmovl $0, %eax     # count = 0
	jl rest		        # if so, goto rest:
    mrmovl (%ebx), %esi	     # src[0]

loop0:	
	# mrmovl (%ebx), %esi	     # src[0]
    mrmovl 4(%ebx), %edi	 # src[1]
	andl %esi, %esi		 # if src[0] <= 0, jump to loop1
	rmmovl %esi, (%ecx)	 # dst[0] = src[0]
	jle loop1		
	iaddl $1, %eax		 # else count++

loop1:
    mrmovl 8(%ebx), %esi	 # src[2]
	andl %edi, %edi		 # if src[1] <= 0, jump to loop2
    rmmovl %edi, 4(%ecx)	 # dst[1] = src[1]
    jle loop2		
    iaddl $1, %eax		 # else count++

loop2:
    mrmovl 12(%ebx), %edi	 # src[3]
	andl %esi, %esi		 # if src[2] <= 0, jump to loop3
    rmmovl %esi, 8(%ecx)	 # dst[2] = src[2]
    jle loop3		
    iaddl $1, %eax		 # else count++

loop3:
    mrmovl 16(%ebx), %esi	 # src[4]
	andl %edi, %edi		 # if src[3] <= 0, jump to loop4
    rmmovl %edi, 12(%ecx)	 # dst[3] = src[3]
    jle loop4		
    iaddl $1, %eax		 # else count++

loop4:
    mrmovl 20(%ebx), %edi	 # src[5]
	andl %esi, %esi		 # if src[4] <= 0, jump to loop5
    rmmovl %esi, 16(%ecx)	 # dst[4] = src[4]
    jle loop5		
    iaddl $1, %eax		 # else count++

loop5:
    mrmovl 24(%ebx), %esi	 # src[6]
	andl %edi, %edi		 # if src[5] <= 0, jump to update
    rmmovl %edi, 20(%ecx)	 # dst[5] = src[5]
    jle loop6	
    iaddl $1, %eax		 # else count++

loop6:
    mrmovl 28(%ebx), %edi	 # src[7]
    andl %esi, %esi		 # if src[6] <= 0, jump to update
    rmmovl %esi, 24(%ecx)	 # dst[6] = src[6]
    jle loop7
    iaddl $1, %eax		 # else count++

loop7:
    andl %edi, %edi		 # if src[7] <= 0, jump to update
    rmmovl %edi, 28(%ecx)	 # dst[7] = src[7]
    jle update
    iaddl $1, %eax		 # else count++

update:
    iaddl $32, %ebx		# src += 8
    iaddl $32, %ecx		# dst += 8
    iaddl $-8, %edx		# len -= 8
    mrmovl (%ebx), %esi	     # src[0]
    jge loop0			# if so, goto Loop0, else goto rest

# Now we have len < 8, then we can build a binary search tree to find len
# notice that %edx = len - 8, it can be {-8, -7, -6, -5, -4, -3, -2, -1}
# when len%6=0, have bug?
# bug fixed! Just modifie jg to jge and jle to jl

rest:
    iaddl $5, %edx		# len += 5 {-3, -2, -1, 0, 1, 2, 3, 4}
    mrmovl (%ebx), %esi	# read val from src...
    jl searchleft       # {-3, -2, -1}
    je resloop3_1       # len = 3
    jmp searchright     # {1, 2, 3, 4}

searchleft:
    iaddl $2, %edx		# len += 2 { -1, 0, 1}
    mrmovl (%ebx), %esi	# read val from src...
    jl Done
    je resloop1_1      # len = 1
    jmp resloop2_1     # len = 2

searchright:
    iaddl $-2, %edx		    # len -= 2 # len -= 2 {-1, 0, 1, 2}
    mrmovl 4(%ebx), %edi	# read val from src...
    # mrmovl (%ebx), %esi	# read val from src...
    jl resloop4_1 
    je resloop5_1      # len = 5
    jmp resloop6_1     # len = 6 or 7

resloop1_1:
	andl %esi, %esi		# val <= 0?
    rmmovl %esi, (%ecx)	# ...and store it to dst
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop2_1:
    mrmovl 4(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
    rmmovl %esi, (%ecx)	# ...and store it to dst
    jle resloop2_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop2_2:
	andl %edi, %edi		# val <= 0?
    rmmovl %edi, 4(%ecx)	# ...and store it to dst
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop3_1:
    # mrmovl (%ebx), %esi	    # read val from src...
    mrmovl 4(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
    rmmovl %esi, (%ecx)	# ...and store it to dst
    jle resloop3_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop3_2:
    rmmovl %edi, 4(%ecx)	# store it to dst
	andl %edi, %edi		# val <= 0?
    mrmovl 8(%ebx), %esi	# read val from src...
    jle resloop3_3		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop3_3:
	andl %esi, %esi		# val <= 0?
    rmmovl %esi, 8(%ecx)	# ...and store it to dst
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop4_1:
    # mrmovl 4(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
    rmmovl %esi, (%ecx)	# ...and store it to dst
    jle resloop4_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop4_2:
    rmmovl %edi, 4(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
    mrmovl 8(%ebx), %esi	# read val from src...
    jle resloop4_3		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop4_3:
    rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
    mrmovl 12(%ebx), %edi	# read val from src...
    jle resloop4_4		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop4_4:
	andl %edi, %edi		# val <= 0?
    rmmovl %edi, 12(%ecx)	# ...and store it to dst
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop5_1:
    # mrmovl (%ebx), %esi	    # read val from src...
    # mrmovl 4(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
    rmmovl %esi, (%ecx)	# ...and store it to dst
    jle resloop5_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_2:
    rmmovl %edi, 4(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
    mrmovl 8(%ebx), %esi	# read val from src...
    jle resloop5_3		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_3:
    rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
    mrmovl 12(%ebx), %edi	# read val from src...
    jle resloop5_4		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_4:
    rmmovl %edi, 12(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
    mrmovl 16(%ebx), %esi	# read val from src...
    jle resloop5_5		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_5:
	andl %esi, %esi		# val <= 0?
    rmmovl %esi, 16(%ecx)	# ...and store it to dst
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop6_1:
    # mrmovl 4(%ebx), %edi	# read val from src...
    andl %esi, %esi		# val <= 0?
    rmmovl %esi, (%ecx)	# ...and store it to dst
    jle resloop6_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop6_2:
    rmmovl %edi, 4(%ecx)	# ...and store it to dst
    andl %edi, %edi		# val <= 0?
    mrmovl 8(%ebx), %esi	# read val from src...
    jle resloop6_3		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop6_3:
    rmmovl %esi, 8(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    mrmovl 12(%ebx), %edi	# read val from src...
    jle resloop6_4		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop6_4:
    rmmovl %edi, 12(%ecx)	# ...and store it to dst
    andl %edi, %edi		# val <= 0?
    mrmovl 16(%ebx), %esi	# read val from src...
    jle resloop6_5		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop6_5:
    rmmovl %esi, 16(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    mrmovl 20(%ebx), %edi	# read val from src...
    jle resloop6_6		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop6_6:
    andl %edi, %edi		# val <= 0?
    rmmovl %edi, 20(%ecx)	# ...and store it to dst
    jle test		# if so, goto Npos:
    iaddl $1, %eax		# count++

test:
    iaddl $-1, %edx		# len -= 2
    mrmovl 24(%ebx), %esi	# read val from src...
    je Done			    # if len == 6, goto Done

resloop7:
    # mrmovl 24(%ebx), %esi	# read val from src...
    andl %esi, %esi		# val <= 0?
    rmmovl %esi, 24(%ecx)	# ...and store it to dst
    jle  Done		# if so, goto Npos:
    iaddl $1, %eax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
